"use client";
import { useState, useEffect } from "react";
import LocalDashboardLayout from "../../components/LocalDashboardLayout";
import ToastContainer from "../../components/ToastContainer";

export default function LocalAttendancePage() {
  const [mounted, setMounted] = useState(false);
  const [selectedDate, setSelectedDate] = useState(
    new Date().toISOString().split("T")[0]
  );
  const [attendanceData, setAttendanceData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showLogModal, setShowLogModal] = useState(false);
  const [showJointProgramModal, setShowJointProgramModal] = useState(false);
  const [logForm, setLogForm] = useState({
    week: "",
    month: "",
    year: "",
    date: new Date().toISOString().split("T")[0],
    male: 0,
    female: 0,
    total: 0,
  });
  const [jointProgramForm, setJointProgramForm] = useState({
    week: "",
    month: "",
    year: "",
    date: new Date().toISOString().split("T")[0],
    programTitle: "",
    location: "",
  });

  // Mock data for demonstration - in real app this would come from API/database
  const [attendanceStats, setAttendanceStats] = useState({
    totalMale: 1247,
    totalFemale: 1893,
    weeksLogged: 23,
    totalWeeks: 52,
  });

  // Current month and year data
  const [currentMonthData, setCurrentMonthData] = useState({
    month: "July",
    year: 2025,
    weeks: [
      {
        week: "Week 1",
        male: 45,
        female: 67,
        total: 112,
        date: "2025-07-06",
        isJointProgram: false,
      },
      {
        week: "Week 2",
        male: 52,
        female: 71,
        total: 123,
        date: "2025-07-13",
        isJointProgram: false,
      },
      {
        week: "Week 3",
        male: 48,
        female: 65,
        total: 113,
        date: "2025-07-20",
        isJointProgram: false,
      },
      {
        week: "Week 4",
        male: 55,
        female: 73,
        total: 128,
        date: "2025-07-27",
        isJointProgram: false,
      },
    ],
    totalMale: 200,
    totalFemale: 276,
    totalAttendance: 476,
  });

  const [currentYearData, setCurrentYearData] = useState({
    year: 2025,
    months: [
      { month: "January", male: 180, female: 245, total: 425 },
      { month: "February", male: 195, female: 268, total: 463 },
      { month: "March", male: 210, female: 285, total: 495 },
      { month: "April", male: 185, female: 252, total: 437 },
      { month: "May", male: 220, female: 298, total: 518 },
      { month: "June", male: 205, female: 275, total: 480 },
      { month: "July", male: 200, female: 276, total: 476 },
    ],
    totalMale: 1395,
    totalFemale: 1899,
    totalAttendance: 3294,
  });

  useEffect(() => {
    setMounted(true);
  }, []);

  // Calculate total whenever male or female count changes
  useEffect(() => {
    setLogForm((prev) => ({
      ...prev,
      total: prev.male + prev.female,
    }));
  }, [logForm.male, logForm.female]);

  const handleLogAttendance = () => {
    setShowLogModal(true);
  };

  const handleJointProgram = () => {
    setShowJointProgramModal(true);
  };

  const handleCloseLogModal = () => {
    setShowLogModal(false);
    setLogForm({
      week: "",
      month: "",
      year: "",
      date: new Date().toISOString().split("T")[0],
      male: 0,
      female: 0,
      total: 0,
    });
  };

  const handleCloseJointProgramModal = () => {
    setShowJointProgramModal(false);
    setJointProgramForm({
      week: "",
      month: "",
      year: "",
      date: new Date().toISOString().split("T")[0],
      programTitle: "",
      location: "",
    });
  };

  const handleSubmitLog = () => {
    // Update attendance stats when logging attendance
    setAttendanceStats((prev) => ({
      ...prev,
      totalMale: prev.totalMale + logForm.male,
      totalFemale: prev.totalFemale + logForm.female,
      weeksLogged: prev.weeksLogged + 1,
    }));

    // Update current month data
    setCurrentMonthData((prev) => ({
      ...prev,
      totalMale: prev.totalMale + logForm.male,
      totalFemale: prev.totalFemale + logForm.female,
      totalAttendance: prev.totalAttendance + logForm.total,
    }));

    // Update current year data
    setCurrentYearData((prev) => ({
      ...prev,
      totalMale: prev.totalMale + logForm.male,
      totalFemale: prev.totalFemale + logForm.female,
      totalAttendance: prev.totalAttendance + logForm.total,
    }));

    if (typeof window !== "undefined" && window.showToast) {
      window.showToast("Attendance logged successfully!", "success");
    }
    handleCloseLogModal();
  };

  const handleInputChange = (field, value) => {
    setLogForm((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleJointProgramInputChange = (field, value) => {
    setJointProgramForm((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSubmitJointProgram = () => {
    // Update current month data to mark the selected week as joint program
    setCurrentMonthData((prev) => ({
      ...prev,
      weeks: prev.weeks.map((week, index) => {
        if (week.week === jointProgramForm.week) {
          return {
            ...week,
            isJointProgram: true,
            programTitle: jointProgramForm.programTitle,
            location: jointProgramForm.location,
          };
        }
        return week;
      }),
    }));

    if (typeof window !== "undefined" && window.showToast) {
      window.showToast("Joint program logged successfully!", "success");
    }
    handleCloseJointProgramModal();
  };

  if (!mounted) {
    return null;
  }

  return (
    <LocalDashboardLayout currentPage="Attendance">
      <div className="space-y-6">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-green-600 to-blue-600 dark:from-green-700 dark:to-blue-700 rounded-xl shadow-xl overflow-hidden relative">
          <div className="absolute inset-0 bg-gradient-to-r from-green-400/20 to-blue-400/20 animate-pulse"></div>
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>

          <div className="relative z-10 p-6 lg:p-8">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
              <div className="mb-4 lg:mb-0">
                <div className="flex items-center mb-2">
                  <i className="fas fa-calendar-check text-white text-2xl lg:text-3xl mr-3"></i>
                  <h1 className="text-xl lg:text-3xl font-bold text-white">
                    Attendance Management
                  </h1>
                </div>
                <p className="text-white/90 text-sm lg:text-base">
                  Track and manage member attendance for services and events
                </p>
              </div>

              <div className="flex items-center space-x-3">
                <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3 text-center">
                  <div className="text-white text-xs opacity-90">Today</div>
                  <div className="text-white font-semibold">
                    {new Date().toLocaleDateString()}
                  </div>
                </div>
                <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3 text-center">
                  <div className="text-white text-xs opacity-90">Status</div>
                  <div className="text-green-300 font-semibold">Active</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Summary Cards Section */}
        <div className="overflow-x-auto">
          <div className="flex justify-between min-w-max p-1 gap-4">
            {/* Total Male Card */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 min-w-[280px] relative overflow-hidden border border-gray-200 dark:border-gray-700">
              {/* Light animation background */}
              <div className="absolute inset-0 bg-gradient-to-r from-blue-400/5 to-blue-300/5 dark:from-blue-300/10 dark:to-blue-200/10 animate-pulse"></div>
              <div className="absolute top-0 right-0 w-20 h-20 bg-blue-100/30 dark:bg-blue-400/10 rounded-full -mr-10 -mt-10"></div>
              <div className="absolute bottom-0 left-0 w-16 h-16 bg-blue-100/30 dark:bg-blue-400/10 rounded-full -ml-8 -mb-8"></div>

              <div className="relative z-10">
                <div className="flex items-center justify-between mb-4">
                  <div className="bg-blue-100 dark:bg-blue-900/30 rounded-lg p-3">
                    <i className="fas fa-male text-blue-600 dark:text-blue-400 text-xl"></i>
                  </div>
                  <div className="text-right">
                    <div className="text-gray-600 dark:text-gray-400 text-sm">
                      Total Male
                    </div>
                    <div className="text-gray-900 dark:text-white text-2xl font-bold">
                      {attendanceStats.totalMale.toLocaleString()}
                    </div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="text-gray-600 dark:text-gray-400 text-sm">
                    {attendanceStats.weeksLogged}/{attendanceStats.totalWeeks}{" "}
                    weeks
                  </div>
                  <div className="text-blue-600 dark:text-blue-400 font-semibold">
                    {Math.round(
                      (attendanceStats.weeksLogged /
                        attendanceStats.totalWeeks) *
                        100
                    )}
                    %
                  </div>
                </div>
                <div className="mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div
                    className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                    style={{
                      width: `${(attendanceStats.weeksLogged / attendanceStats.totalWeeks) * 100}%`,
                    }}
                  ></div>
                </div>
              </div>
            </div>

            {/* Total Female Card */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 min-w-[280px] relative overflow-hidden border border-gray-200 dark:border-gray-700">
              {/* Light animation background */}
              <div className="absolute inset-0 bg-gradient-to-r from-pink-400/5 to-pink-300/5 dark:from-pink-300/10 dark:to-pink-200/10 animate-pulse"></div>
              <div className="absolute top-0 right-0 w-20 h-20 bg-pink-100/30 dark:bg-pink-400/10 rounded-full -mr-10 -mt-10"></div>
              <div className="absolute bottom-0 left-0 w-16 h-16 bg-pink-100/30 dark:bg-pink-400/10 rounded-full -ml-8 -mb-8"></div>

              <div className="relative z-10">
                <div className="flex items-center justify-between mb-4">
                  <div className="bg-pink-100 dark:bg-pink-900/30 rounded-lg p-3">
                    <i className="fas fa-female text-pink-600 dark:text-pink-400 text-xl"></i>
                  </div>
                  <div className="text-right">
                    <div className="text-gray-600 dark:text-gray-400 text-sm">
                      Total Female
                    </div>
                    <div className="text-gray-900 dark:text-white text-2xl font-bold">
                      {attendanceStats.totalFemale.toLocaleString()}
                    </div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="text-gray-600 dark:text-gray-400 text-sm">
                    {attendanceStats.weeksLogged}/{attendanceStats.totalWeeks}{" "}
                    weeks
                  </div>
                  <div className="text-pink-600 dark:text-pink-400 font-semibold">
                    {Math.round(
                      (attendanceStats.weeksLogged /
                        attendanceStats.totalWeeks) *
                        100
                    )}
                    %
                  </div>
                </div>
                <div className="mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div
                    className="bg-pink-500 h-2 rounded-full transition-all duration-300"
                    style={{
                      width: `${(attendanceStats.weeksLogged / attendanceStats.totalWeeks) * 100}%`,
                    }}
                  ></div>
                </div>
              </div>
            </div>

            {/* Grand Total Card */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 min-w-[280px] relative overflow-hidden border border-gray-200 dark:border-gray-700">
              {/* Light animation background */}
              <div className="absolute inset-0 bg-gradient-to-r from-green-400/5 to-green-300/5 dark:from-green-300/10 dark:to-green-200/10 animate-pulse"></div>
              <div className="absolute top-0 right-0 w-20 h-20 bg-green-100/30 dark:bg-green-400/10 rounded-full -mr-10 -mt-10"></div>
              <div className="absolute bottom-0 left-0 w-16 h-16 bg-green-100/30 dark:bg-green-400/10 rounded-full -ml-8 -mb-8"></div>

              <div className="relative z-10">
                <div className="flex items-center justify-between mb-4">
                  <div className="bg-green-100 dark:bg-green-900/30 rounded-lg p-3">
                    <i className="fas fa-users text-green-600 dark:text-green-400 text-xl"></i>
                  </div>
                  <div className="text-right">
                    <div className="text-gray-600 dark:text-gray-400 text-sm">
                      Grand Total
                    </div>
                    <div className="text-gray-900 dark:text-white text-2xl font-bold">
                      {(
                        attendanceStats.totalMale + attendanceStats.totalFemale
                      ).toLocaleString()}
                    </div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="text-gray-600 dark:text-gray-400 text-sm">
                    {attendanceStats.weeksLogged}/{attendanceStats.totalWeeks}{" "}
                    weeks
                  </div>
                  <div className="text-green-600 dark:text-green-400 font-semibold">
                    {Math.round(
                      (attendanceStats.weeksLogged /
                        attendanceStats.totalWeeks) *
                        100
                    )}
                    %
                  </div>
                </div>
                <div className="mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div
                    className="bg-green-500 h-2 rounded-full transition-all duration-300"
                    style={{
                      width: `${(attendanceStats.weeksLogged / attendanceStats.totalWeeks) * 100}%`,
                    }}
                  ></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Filter Section */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
          <div className="mb-4">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              <i className="fas fa-filter text-blue-500 mr-2"></i>
              Filter Attendance
            </h2>
            <p className="text-gray-600 dark:text-gray-400 text-sm">
              Filter attendance data by time period
            </p>
          </div>
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 lg:gap-4">
            {/* Week Filter */}
            <div className="flex flex-col space-y-1 lg:space-y-2">
              <label className="text-xs lg:text-sm font-medium text-gray-700 dark:text-gray-300">
                Week
              </label>
              <select
                defaultValue="all"
                onChange={(e) => {
                  setSelectedDate(e.target.value);
                  if (typeof window !== "undefined" && window.showToast) {
                    window.showToast(
                      e.target.value === "all"
                        ? "Showing all weeks"
                        : `Filtered by week: ${e.target.value}`,
                      "info"
                    );
                  }
                }}
                className="px-2 lg:px-3 py-1.5 lg:py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-xs lg:text-sm"
              >
                <option value="all">All Weeks</option>
                <option value="week-1">Week 1</option>
                <option value="week-2">Week 2</option>
                <option value="week-3">Week 3</option>
                <option value="week-4">Week 4</option>
                <option value="week-5">Week 5</option>
              </select>
            </div>

            {/* Month Filter */}
            <div className="flex flex-col space-y-1 lg:space-y-2">
              <label className="text-xs lg:text-sm font-medium text-gray-700 dark:text-gray-300">
                Month
              </label>
              <select
                defaultValue="all"
                onChange={(e) => {
                  setSelectedDate(e.target.value);
                  if (typeof window !== "undefined" && window.showToast) {
                    window.showToast(
                      e.target.value === "all"
                        ? "Showing all months"
                        : `Filtered by month: ${e.target.value}`,
                      "info"
                    );
                  }
                }}
                className="px-2 lg:px-3 py-1.5 lg:py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-xs lg:text-sm"
              >
                <option value="all">All Months</option>
                <option value="01">January</option>
                <option value="02">February</option>
                <option value="03">March</option>
                <option value="04">April</option>
                <option value="05">May</option>
                <option value="06">June</option>
                <option value="07">July</option>
                <option value="08">August</option>
                <option value="09">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
              </select>
            </div>

            {/* Year Filter */}
            <div className="flex flex-col space-y-1 lg:space-y-2">
              <label className="text-xs lg:text-sm font-medium text-gray-700 dark:text-gray-300">
                Year
              </label>
              <select
                defaultValue="all"
                onChange={(e) => {
                  setSelectedDate(e.target.value);
                  if (typeof window !== "undefined" && window.showToast) {
                    window.showToast(
                      e.target.value === "all"
                        ? "Showing all years"
                        : `Filtered by year: ${e.target.value}`,
                      "info"
                    );
                  }
                }}
                className="px-2 lg:px-3 py-1.5 lg:py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-xs lg:text-sm"
              >
                <option value="all">All Years</option>
                <option value="2025">2025</option>
              </select>
            </div>

            {/* Quick Actions */}
            <div className="flex flex-col space-y-1 lg:space-y-2">
              <label className="text-xs lg:text-sm font-medium text-gray-700 dark:text-gray-300">
                Quick Actions
              </label>
              <div className="flex flex-col space-y-2">
                <button
                  onClick={handleLogAttendance}
                  className="px-2 lg:px-3 py-1.5 lg:py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors duration-200 text-xs lg:text-sm"
                >
                  <i className="fas fa-plus mr-1 lg:mr-2"></i>
                  Log Attendance
                </button>
                <button
                  onClick={handleJointProgram}
                  className="px-2 lg:px-3 py-1.5 lg:py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors duration-200 text-xs lg:text-sm"
                >
                  <i className="fas fa-handshake mr-1 lg:mr-2"></i>
                  Joint Program
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Attendance for the Day Card */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              <i className="fas fa-calendar-day text-green-500 mr-2"></i>
              Attendance for {new Date(selectedDate).toLocaleDateString()}
            </h3>
          </div>
          <div className="p-6">
            <div className="overflow-x-auto">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 min-w-[600px]">
              {/* Male Attendance */}
              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="bg-blue-100 dark:bg-blue-800 rounded-lg p-2 mr-3">
                      <i className="fas fa-male text-blue-600 dark:text-blue-400 text-lg"></i>
                    </div>
                    <div>
                      <div className="text-blue-600 dark:text-blue-400 text-sm font-medium">
                        Male
                      </div>
                      <div className="text-gray-900 dark:text-white text-2xl font-bold">
                        45
                      </div>
                    </div>
                  </div>
                  <div className="text-blue-600 dark:text-blue-400 text-xs">
                    <i className="fas fa-users mr-1"></i>
                    Present
                  </div>
                </div>
              </div>

              {/* Female Attendance */}
              <div className="bg-pink-50 dark:bg-pink-900/20 rounded-lg p-4 border border-pink-200 dark:border-pink-800">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="bg-pink-100 dark:bg-pink-800 rounded-lg p-2 mr-3">
                      <i className="fas fa-female text-pink-600 dark:text-pink-400 text-lg"></i>
                    </div>
                    <div>
                      <div className="text-pink-600 dark:text-pink-400 text-sm font-medium">
                        Female
                      </div>
                      <div className="text-gray-900 dark:text-white text-2xl font-bold">
                        67
                      </div>
                    </div>
                  </div>
                  <div className="text-pink-600 dark:text-pink-400 text-xs">
                    <i className="fas fa-users mr-1"></i>
                    Present
                  </div>
                </div>
              </div>

              {/* Total Attendance */}
              <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4 border border-green-200 dark:border-green-800">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="bg-green-100 dark:bg-green-800 rounded-lg p-2 mr-3">
                      <i className="fas fa-users text-green-600 dark:text-green-400 text-lg"></i>
                    </div>
                    <div>
                      <div className="text-green-600 dark:text-green-400 text-sm font-medium">
                        Total
                      </div>
                      <div className="text-gray-900 dark:text-white text-2xl font-bold">
                        112
                      </div>
                    </div>
                  </div>
                  <div className="text-green-600 dark:text-green-400 text-xs">
                    <i className="fas fa-calendar-check mr-1"></i>
                    Today
                  </div>
                </div>
              </div>
            </div>

            {/* Additional Info */}
            <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-center text-sm text-gray-600 dark:text-gray-400">
                <div className="flex items-center">
                  <i className="fas fa-clock mr-2 text-blue-500"></i>
                  <span>Service Time: 9:00 AM</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Current Month Weekly Data */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              <i className="fas fa-calendar-week text-blue-500 mr-2"></i>
              {currentMonthData.month} {currentMonthData.year} - Weekly
              Attendance
            </h3>
          </div>
          <div className="p-6">
            <div className="overflow-x-auto">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6 min-w-[800px]">
              {/* Week 1 */}
              <div
                className={`rounded-lg p-4 border ${
                  currentMonthData.weeks[0]?.isJointProgram
                    ? "bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800"
                    : "bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800"
                }`}
              >
                <div className="text-center">
                  <div
                    className={`text-sm font-medium mb-2 ${
                      currentMonthData.weeks[0]?.isJointProgram
                        ? "text-purple-600 dark:text-purple-400"
                        : "text-blue-600 dark:text-blue-400"
                    }`}
                  >
                    {currentMonthData.weeks[0]?.isJointProgram
                      ? "Joint Program"
                      : "Week 1"}
                  </div>
                  <div className="text-gray-900 dark:text-white text-xl font-bold mb-1">
                    {currentMonthData.weeks[0]?.isJointProgram
                      ? "—"
                      : currentMonthData.weeks[0]?.total || 0}
                  </div>
                  <div className="text-gray-600 dark:text-gray-400 text-xs">
                    {currentMonthData.weeks[0]?.isJointProgram
                      ? currentMonthData.weeks[0]?.programTitle || "Program"
                      : `${currentMonthData.weeks[0]?.male || 0}M / ${currentMonthData.weeks[0]?.female || 0}F`}
                  </div>
                </div>
              </div>

              {/* Week 2 */}
              <div
                className={`rounded-lg p-4 border ${
                  currentMonthData.weeks[1]?.isJointProgram
                    ? "bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800"
                    : "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800"
                }`}
              >
                <div className="text-center">
                  <div
                    className={`text-sm font-medium mb-2 ${
                      currentMonthData.weeks[1]?.isJointProgram
                        ? "text-purple-600 dark:text-purple-400"
                        : "text-green-600 dark:text-green-400"
                    }`}
                  >
                    {currentMonthData.weeks[1]?.isJointProgram
                      ? "Joint Program"
                      : "Week 2"}
                  </div>
                  <div className="text-gray-900 dark:text-white text-xl font-bold mb-1">
                    {currentMonthData.weeks[1]?.isJointProgram
                      ? "—"
                      : currentMonthData.weeks[1]?.total || 0}
                  </div>
                  <div className="text-gray-600 dark:text-gray-400 text-xs">
                    {currentMonthData.weeks[1]?.isJointProgram
                      ? currentMonthData.weeks[1]?.programTitle || "Program"
                      : `${currentMonthData.weeks[1]?.male || 0}M / ${currentMonthData.weeks[1]?.female || 0}F`}
                  </div>
                </div>
              </div>

              {/* Week 3 */}
              <div
                className={`rounded-lg p-4 border ${
                  currentMonthData.weeks[2]?.isJointProgram
                    ? "bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800"
                    : "bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800"
                }`}
              >
                <div className="text-center">
                  <div
                    className={`text-sm font-medium mb-2 ${
                      currentMonthData.weeks[2]?.isJointProgram
                        ? "text-purple-600 dark:text-purple-400"
                        : "text-purple-600 dark:text-purple-400"
                    }`}
                  >
                    {currentMonthData.weeks[2]?.isJointProgram
                      ? "Joint Program"
                      : "Week 3"}
                  </div>
                  <div className="text-gray-900 dark:text-white text-xl font-bold mb-1">
                    {currentMonthData.weeks[2]?.isJointProgram
                      ? "—"
                      : currentMonthData.weeks[2]?.total || 0}
                  </div>
                  <div className="text-gray-600 dark:text-gray-400 text-xs">
                    {currentMonthData.weeks[2]?.isJointProgram
                      ? currentMonthData.weeks[2]?.programTitle || "Program"
                      : `${currentMonthData.weeks[2]?.male || 0}M / ${currentMonthData.weeks[2]?.female || 0}F`}
                  </div>
                </div>
              </div>

              {/* Week 4 */}
              <div
                className={`rounded-lg p-4 border ${
                  currentMonthData.weeks[3]?.isJointProgram
                    ? "bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800"
                    : "bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800"
                }`}
              >
                <div className="text-center">
                  <div
                    className={`text-sm font-medium mb-2 ${
                      currentMonthData.weeks[3]?.isJointProgram
                        ? "text-purple-600 dark:text-purple-400"
                        : "text-orange-600 dark:text-orange-400"
                    }`}
                  >
                    {currentMonthData.weeks[3]?.isJointProgram
                      ? "Joint Program"
                      : "Week 4"}
                  </div>
                  <div className="text-gray-900 dark:text-white text-xl font-bold mb-1">
                    {currentMonthData.weeks[3]?.isJointProgram
                      ? "—"
                      : currentMonthData.weeks[3]?.total || 0}
                  </div>
                  <div className="text-gray-600 dark:text-gray-400 text-xs">
                    {currentMonthData.weeks[3]?.isJointProgram
                      ? currentMonthData.weeks[3]?.programTitle || "Program"
                      : `${currentMonthData.weeks[3]?.male || 0}M / ${currentMonthData.weeks[3]?.female || 0}F`}
                  </div>
                </div>
              </div>
            </div>

            {/* Month Summary */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <i className="fas fa-chart-bar text-blue-500 mr-3"></i>
                  <div>
                    <div className="text-gray-900 dark:text-white font-semibold">
                      {currentMonthData.month} {currentMonthData.year} Summary
                    </div>
                    <div className="text-gray-600 dark:text-gray-400 text-sm">
                      Total Attendance: {currentMonthData.totalAttendance}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-gray-900 dark:text-white font-bold text-lg">
                    {currentMonthData.totalMale + currentMonthData.totalFemale}
                  </div>
                  <div className="text-gray-600 dark:text-gray-400 text-sm">
                    {currentMonthData.totalMale}M /{" "}
                    {currentMonthData.totalFemale}F
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Current Year Monthly Data */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              <i className="fas fa-calendar-alt text-green-500 mr-2"></i>
              {currentYearData.year} - Monthly Attendance Overview
            </h3>
          </div>
          <div className="p-6">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-200 dark:border-gray-700">
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700 dark:text-gray-300">
                      Month
                    </th>
                    <th className="text-center py-3 px-4 text-sm font-medium text-gray-700 dark:text-gray-300">
                      Male
                    </th>
                    <th className="text-center py-3 px-4 text-sm font-medium text-gray-700 dark:text-gray-300">
                      Female
                    </th>
                    <th className="text-center py-3 px-4 text-sm font-medium text-gray-700 dark:text-gray-300">
                      Total
                    </th>
                    <th className="text-center py-3 px-4 text-sm font-medium text-gray-700 dark:text-gray-300">
                      Trend
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {currentYearData.months.map((monthData, index) => (
                    <tr
                      key={index}
                      className="border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700"
                    >
                      <td className="py-3 px-4 text-sm font-medium text-gray-900 dark:text-white">
                        {monthData.month}
                      </td>
                      <td className="py-3 px-4 text-sm text-center text-gray-900 dark:text-white">
                        {monthData.male}
                      </td>
                      <td className="py-3 px-4 text-sm text-center text-gray-900 dark:text-white">
                        {monthData.female}
                      </td>
                      <td className="py-3 px-4 text-sm text-center font-semibold text-gray-900 dark:text-white">
                        {monthData.total}
                      </td>
                      <td className="py-3 px-4 text-sm text-center">
                        <div className="flex items-center justify-center">
                          {index > 0 && (
                            <span
                              className={`text-xs px-2 py-1 rounded-full ${
                                monthData.total >
                                currentYearData.months[index - 1].total
                                  ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                                  : monthData.total <
                                      currentYearData.months[index - 1].total
                                    ? "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                                    : "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200"
                              }`}
                            >
                              {monthData.total >
                              currentYearData.months[index - 1].total
                                ? "↗"
                                : monthData.total <
                                    currentYearData.months[index - 1].total
                                  ? "↘"
                                  : "→"}
                            </span>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Year Summary */}
            <div className="mt-6 bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <i className="fas fa-chart-line text-green-500 mr-3"></i>
                  <div>
                    <div className="text-gray-900 dark:text-white font-semibold">
                      {currentYearData.year} Annual Summary
                    </div>
                    <div className="text-gray-600 dark:text-gray-400 text-sm">
                      Total Attendance: {currentYearData.totalAttendance}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-gray-900 dark:text-white font-bold text-lg">
                    {currentYearData.totalMale + currentYearData.totalFemale}
                  </div>
                  <div className="text-gray-600 dark:text-gray-400 text-sm">
                    {currentYearData.totalMale}M / {currentYearData.totalFemale}
                    F
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Log Attendance Modal */}
      {showLogModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  <i className="fas fa-calendar-plus text-green-500 mr-2"></i>
                  Log Attendance
                </h3>
                <button
                  onClick={handleCloseLogModal}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                >
                  <i className="fas fa-times text-xl"></i>
                </button>
              </div>

              <div className="space-y-4">
                {/* Week Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Week
                  </label>
                  <select
                    value={logForm.week}
                    onChange={(e) => handleInputChange("week", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    <option value="">Select Week</option>
                    <option value="week-1">Week 1</option>
                    <option value="week-2">Week 2</option>
                    <option value="week-3">Week 3</option>
                    <option value="week-4">Week 4</option>
                    <option value="week-5">Week 5</option>
                  </select>
                </div>

                {/* Month Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Month
                  </label>
                  <select
                    value={logForm.month}
                    onChange={(e) => handleInputChange("month", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    <option value="">Select Month</option>
                    <option value="01">January</option>
                    <option value="02">February</option>
                    <option value="03">March</option>
                    <option value="04">April</option>
                    <option value="05">May</option>
                    <option value="06">June</option>
                    <option value="07">July</option>
                    <option value="08">August</option>
                    <option value="09">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                  </select>
                </div>

                {/* Year Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Year
                  </label>
                  <select
                    value={logForm.year}
                    onChange={(e) => handleInputChange("year", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    <option value="">Select Year</option>
                    <option value="2025">2025</option>
                  </select>
                </div>

                {/* Date Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Date
                  </label>
                  <input
                    type="date"
                    value={logForm.date}
                    onChange={(e) => handleInputChange("date", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                </div>

                {/* Male Count */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Male Count
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={logForm.male}
                    onChange={(e) =>
                      handleInputChange("male", parseInt(e.target.value) || 0)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="0"
                  />
                </div>

                {/* Female Count */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Female Count
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={logForm.female}
                    onChange={(e) =>
                      handleInputChange("female", parseInt(e.target.value) || 0)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="0"
                  />
                </div>

                {/* Total (Auto-calculated) */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Total
                  </label>
                  <input
                    type="number"
                    value={logForm.total}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white cursor-not-allowed"
                    disabled
                  />
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={handleCloseLogModal}
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSubmitLog}
                  className="flex-1 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors"
                >
                  Log Attendance
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Joint Program Modal */}
      {showJointProgramModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  <i className="fas fa-handshake text-purple-500 mr-2"></i>
                  Log Joint Program
                </h3>
                <button
                  onClick={handleCloseJointProgramModal}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                >
                  <i className="fas fa-times text-xl"></i>
                </button>
              </div>

              <div className="space-y-4">
                {/* Week Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Week
                  </label>
                  <select
                    value={jointProgramForm.week}
                    onChange={(e) =>
                      handleJointProgramInputChange("week", e.target.value)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select Week</option>
                    <option value="week-1">Week 1</option>
                    <option value="week-2">Week 2</option>
                    <option value="week-3">Week 3</option>
                    <option value="week-4">Week 4</option>
                    <option value="week-5">Week 5</option>
                  </select>
                </div>

                {/* Month Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Month
                  </label>
                  <select
                    value={jointProgramForm.month}
                    onChange={(e) =>
                      handleJointProgramInputChange("month", e.target.value)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select Month</option>
                    <option value="01">January</option>
                    <option value="02">February</option>
                    <option value="03">March</option>
                    <option value="04">April</option>
                    <option value="05">May</option>
                    <option value="06">June</option>
                    <option value="07">July</option>
                    <option value="08">August</option>
                    <option value="09">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                  </select>
                </div>

                {/* Year Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Year
                  </label>
                  <select
                    value={jointProgramForm.year}
                    onChange={(e) =>
                      handleJointProgramInputChange("year", e.target.value)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select Year</option>
                    <option value="2025">2025</option>
                  </select>
                </div>

                {/* Date Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Date
                  </label>
                  <input
                    type="date"
                    value={jointProgramForm.date}
                    onChange={(e) =>
                      handleJointProgramInputChange("date", e.target.value)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>

                {/* Program Title */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Program Title
                  </label>
                  <input
                    type="text"
                    value={jointProgramForm.programTitle}
                    onChange={(e) =>
                      handleJointProgramInputChange(
                        "programTitle",
                        e.target.value
                      )
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="e.g., Joint Youth Conference"
                  />
                </div>

                {/* Location */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Location
                  </label>
                  <input
                    type="text"
                    value={jointProgramForm.location}
                    onChange={(e) =>
                      handleJointProgramInputChange("location", e.target.value)
                    }
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="e.g., Central Convention Center"
                  />
                </div>
              </div>

              <div className="mt-6 p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
                <div className="flex items-start">
                  <i className="fas fa-info-circle text-purple-600 dark:text-purple-400 mt-1 mr-3"></i>
                  <div className="text-sm text-purple-800 dark:text-purple-200">
                    <p className="font-medium mb-1">No Attendance Recorded</p>
                    <p>
                      This week will be marked as a joint program with no
                      attendance count. The program details will be stored for
                      reference.
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={handleCloseJointProgramModal}
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSubmitJointProgram}
                  className="flex-1 px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors"
                >
                  Log Joint Program
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Toast Container */}
      <ToastContainer />
    </LocalDashboardLayout>
  );
}
